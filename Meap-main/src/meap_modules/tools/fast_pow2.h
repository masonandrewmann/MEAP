#ifndef M_FASTPOW2_H_
#define M_FASTPOW2_H_

// adapted from amy https://github.com/shorepine/amy/blob/main/src/log2_exp2.c

#include <math.h>

const int16_t exp2_fxpt_lutable[257] = {
    0,
    -89,
    -178,
    -267,
    -357,
    -447,
    -537,
    -627,
    -718,
    -808,
    -899,
    -991,
    -1082,
    -1174,
    -1266,
    -1358,
    -1451,
    -1544,
    -1637,
    -1730,
    -1823,
    -1917,
    -2011,
    -2106,
    -2200,
    -2295,
    -2390,
    -2485,
    -2581,
    -2677,
    -2773,
    -2869,
    -2966,
    -3063,
    -3160,
    -3257,
    -3355,
    -3453,
    -3551,
    -3649,
    -3748,
    -3847,
    -3947,
    -4046,
    -4146,
    -4246,
    -4346,
    -4447,
    -4548,
    -4649,
    -4750,
    -4852,
    -4954,
    -5056,
    -5159,
    -5262,
    -5365,
    -5468,
    -5572,
    -5676,
    -5780,
    -5885,
    -5989,
    -6095,
    -6200,
    -6306,
    -6412,
    -6518,
    -6624,
    -6731,
    -6838,
    -6946,
    -7053,
    -7161,
    -7269,
    -7378,
    -7487,
    -7596,
    -7705,
    -7815,
    -7925,
    -8036,
    -8146,
    -8257,
    -8368,
    -8480,
    -8592,
    -8704,
    -8816,
    -8929,
    -9042,
    -9155,
    -9269,
    -9383,
    -9497,
    -9612,
    -9727,
    -9842,
    -9958,
    -10073,
    -10190,
    -10306,
    -10423,
    -10540,
    -10657,
    -10775,
    -10893,
    -11012,
    -11130,
    -11249,
    -11369,
    -11488,
    -11608,
    -11729,
    -11849,
    -11970,
    -12091,
    -12213,
    -12335,
    -12457,
    -12580,
    -12703,
    -12826,
    -12950,
    -13074,
    -13198,
    -13323,
    -13448,
    -13573,
    -13699,
    -13825,
    -13951,
    -14078,
    -14205,
    -14332,
    -14460,
    -14588,
    -14716,
    -14845,
    -14974,
    -15103,
    -15233,
    -15363,
    -15494,
    -15625,
    -15756,
    -15887,
    -16019,
    -16152,
    -16284,
    -16417,
    -16551,
    -16684,
    -16818,
    -16953,
    -17088,
    -17223,
    -17358,
    -17494,
    -17631,
    -17767,
    -17904,
    -18042,
    -18179,
    -18317,
    -18456,
    -18595,
    -18734,
    -18874,
    -19014,
    -19154,
    -19295,
    -19436,
    -19578,
    -19720,
    -19862,
    -20005,
    -20148,
    -20291,
    -20435,
    -20579,
    -20724,
    -20869,
    -21014,
    -21160,
    -21306,
    -21453,
    -21600,
    -21747,
    -21895,
    -22043,
    -22192,
    -22341,
    -22490,
    -22640,
    -22790,
    -22941,
    -23092,
    -23244,
    -23395,
    -23548,
    -23700,
    -23854,
    -24007,
    -24161,
    -24315,
    -24470,
    -24625,
    -24781,
    -24937,
    -25093,
    -25250,
    -25408,
    -25565,
    -25723,
    -25882,
    -26041,
    -26200,
    -26360,
    -26521,
    -26681,
    -26843,
    -27004,
    -27166,
    -27329,
    -27492,
    -27655,
    -27819,
    -27983,
    -28148,
    -28313,
    -28479,
    -28645,
    -28811,
    -28978,
    -29146,
    -29313,
    -29482,
    -29651,
    -29820,
    -29989,
    -30160,
    -30330,
    -30501,
    -30673,
    -30845,
    -31017,
    -31190,
    -31364,
    -31538,
    -31712,
    -31887,
    -32062,
    -32238,
    -32414,
    -32591,
    -32768,
};

#define mS_FRAC_BITS 23
#define mL_FRAC_BITS 15

#define mINT_OF_S(s, b) ((int)floorf((s) * (float)(1 << (b))))
#define mS_FRAC_OF_S(s, b) ((s) * (1 << (b)) - floorf((s) * (1 << (b))))
#define mL2S(l) ((l) / 32768.0f)

#define mSHIFTR(s, b) ((s) * exp2f(-(b)))
#define mSHIFTL(s, b) ((s) * exp2f(b))

static inline float lut_val(float frac, const int16_t *table, const int16_t log2_tab_size)
{
    int16_t index = mINT_OF_S(frac, log2_tab_size);
    float index_frac_part = mS_FRAC_OF_S(frac, log2_tab_size);
    // Tables are constructed to extend one value beyond the log2_tab_size bits max.
    return mL2S(table[index]) + mL2S(table[index + 1] - table[index]) * index_frac_part;
}

float exp2_lut(float x)
{
    int16_t offset = mINT_OF_S(x, 0);
    float x_frac = mS_FRAC_OF_S(x, 0);
    // lut_val is negated because table is stored as negative (to reach 1.0).
    float unnorm = 1.0f - lut_val(x_frac, exp2_fxpt_lutable, 8 /* =log_2(256) */);
    if (offset > 0)
        return mSHIFTL(unnorm, offset);
    else
        return mSHIFTR(unnorm, -offset);
}

#endif // M_FASTPOW2_H_